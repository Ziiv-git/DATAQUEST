import pandas as pd

playstore = pd.read_csv("googleplaystore.csv")
print(playstore.shape)
answer = 'no' #dont care bout the free apps for this project
playstore.drop(labels=10472, inplace=True)

playstore["Price"] = playstore["Price"].str.replace("$", "").astype("float")
paid = playstore[playstore["Price"] != 0].copy()



def clean_size(size):
    """Convert file size string to float and megabytes"""
    size = size.replace("M","")
    if size.endswith("k"):
        size = float(size[:-1])/1000
    elif size == "Varies with device":
        size = pd.np.NaN
    else:
        size = float(size)
    return size

paid.drop('Type', axis='columns', inplace=True)
paid['Reviews'] = paid['Reviews'].astype(int)
paid['Size'] = paid['Size'].apply(clean_size)
paid.info()


paid.drop_duplicates(inplace=True)


If we consider just the App column as the duplicate-finding criteria, we see that we still have a few duplicated apps:
print(paid.duplicated(subset="App").sum())

# sorting based on reviews
paid.sort_values('Reviews', ascending=False, inplace=True)
paid.drop_duplicates(subset='App', inplace=True)
# checking the duplicates if there are any left
print(paid.duplicated('App').sum())
# reseting index
paid.reset_index(inplace=True, drop=True)


paid.hist(column="Price", grid=False, figsize=(12,6))
affordable_apps = paid[paid["Price"]<50].copy()
affordable_apps.hist(column="Price", grid=False, figsize=(12,6))


affordable_apps = paid[paid["Price"]<50].copy()
# o identify the apps in affordable_apps that cost less than $5.
cheap = affordable_apps["Price"]<5
# o identify the apps in affordable_apps that cost $5 or more.
reasonable = affordable_apps["Price"] >=5

affordable_apps[cheap].hist(column="Price", grid=False, figsize=(12,6))

affordable_apps[reasonable].hist(column="Price", grid=False, figsize=(12,6))

# column in affordable_apps called affordability. It should have the value cheap if the price is lower than 5, and reasonable otherwise.
def affordable(price):
    if price < 5:
        return 'cheap'
    else:
        return 'reasonable'

affordable_apps['affordability'] = affordable_apps['Price'].apply(affordable)






#  Pearson correlation coefficient — it ranges between − and, and the closer it is to the less related the variables are.
affordable_apps[cheap].plot(kind="scatter", x="Price", y="Rating")
# there doesn't seem to be any clear relation between price and rating for the cheap apps. In fact, the Pearson coefficient in this instance is around −0.06
print(affordable_apps[cheap].corr().loc["Rating", "Price"])
# -0.05593771505463038
# good news for our price tweaking strategy, because it suggests that we can change prices without it being reflected in the apps' rating.
# We can increase the price of those apps that cost less than, say, the mean cheap price, to the mean cheap price. We would then monitor the behavior of these apps — possibly by using statistical techniques like hypothesis testing,







cheap = affordable_apps["Price"] < 5
reasonable = affordable_apps["Price"] >= 5

cheap_mean = affordable_apps.loc[cheap, 'Price'].mean()
# For only the cheap apps, create a column in affordable_apps called price_criterion that takes the value 1 when the app's price is lower than cheap_mean, and 0 otherwise.
def cheap_criteria(price):
    if price < cheap_mean:
        return 1
    else:
        return 0

affordable_apps.loc[cheap, 'price_criterion'] = affordable_apps['Price'].apply(cheap_criteria)

affordable_apps[reasonable].plot(kind="scatter", x="Price", y="Rating")

reasonable_mean = affordable_apps.loc[reasonable, 'Price'].mean()

def reasonable_criteria(price):
    if price < reasonable_mean:
        return 1
    else:
        return 0


affordable_apps.loc[reasonable, 'price_criterion'] = affordable_apps.loc[reasonable, 'Price'].apply(reasonable_criteria)



# technique called majority voting, in which we decide whether an app's price should increase based on all criteria.
criteria = ["price_criterion", "genre_criterion", "category_criterion"]
affordable_apps["Result"] = affordable_apps[criteria].mode(axis='columns')
def new_price(row):
    if row["affordability"] == "cheap":
        return round(max(row["Price"], cheap_mean), 2)
    else:
        return round(max(row["Price"], reasonable_mean), 2)

affordable_apps["New Price"] = affordable_apps.apply(new_price, axis="columns")

affordable_apps["Installs"] = affordable_apps["Installs"].str.replace("[+,]", "").astype(int)

affordable_apps["Impact"] = (affordable_apps["New Price"]-affordable_apps["Price"])*affordable_apps["Installs"]

total_impact = affordable_apps["Impact"].sum()
print(total_impact)








# column that counts the number of genres to which each app belongs. To do this, we'll use the Series.str.count() string accessor. It takes a regular expression as input and it counts the number of occurences of the given pattern.
affordable_apps["genre_count"] = affordable_apps["Genres"].str.count(";")+1
# mean price varies across the number of genres.
genres_mean = affordable_apps.groupby(
    ["affordability", "genre_count"]
).mean()[["Price"]]


def label_genres(row):
    """For each segment in `genres_mean`,
    labels the apps that cost less than its segment's mean with `1`
    and the others with `0`."""

    aff = row["affordability"]
    gc = row["genre_count"]
    price = row["Price"]

    if price < genres_mean.loc[(aff, gc)][0]:
        return 1
    else:
        return 0

affordable_apps["genre_criterion"] = affordable_apps.apply(label_genres, axis="columns")

# same above procedure for the category
categories_mean = affordable_apps.groupby(["affordability", "Category"]).mean()[["Price"]]

def label_categories(row):
    """For each segment in `categories_mean`,
    labels the apps that cost less than its segment's mean with `1`
    and the others with `0`."""

    aff = row["affordability"]
    cat = row["Category"]
    price = row["Price"]

    if price < categories_mean.loc[(aff, cat)][0]:
        return 1
    else:
        return 0

affordable_apps["category_criterion"] = affordable_apps.apply(label_categories,axis="columns")
